function isString(s) {
	return typeof s === "string";
}

function isObject(o) {
	return o !== null && typeof o === "object";
}

var bindingCache = {};
var Binding =
	/*#__PURE__*/
	(function() {
		function Binding(path) {
			this.path = path;
			this.parts = path.split(".");
			var fstr = "return (x";
			var cpath = "x";

			for (var i = 0; i < this.parts.length; i++) {
				if (this.parts[i][0] >= "0" && this.parts[i][0] <= "9") cpath += "[" + this.parts[i] + "]";
				else cpath += "." + this.parts[i];
				if (i + 1 < this.parts.length) fstr += " && " + cpath;
				else fstr += " ? " + cpath + " : undefined";
			}

			fstr += ")";
			this.value = new Function("x", fstr);
		}

		var _proto = Binding.prototype;

		_proto.set = function set(state, value) {
			var cv = this.value(state);
			if (cv === value) return state;
			var ns = Object.assign({}, state);
			var o = ns;

			for (var i = 0; i < this.parts.length; i++) {
				var part = this.parts[i];
				var no = i == this.parts.length - 1 ? value : Object.assign({}, o[part]);
				o[part] = no;
				o = no;
			}

			return ns;
		};

		_proto.delete = function _delete(state) {
			var ns = Object.assign({}, state);
			var o = ns;
			var part;

			for (var i = 0; i < this.parts.length - 1; i++) {
				part = this.parts[i];
				var no = Object.assign({}, o[part]);
				o[part] = no;
				o = no;
			}

			part = this.parts[this.parts.length - 1];
			if (!o.hasOwnProperty(part)) return state;
			delete o[part];
			return ns;
		};

		Binding.get = function get(path) {
			if (isString(path)) {
				var b = bindingCache[path];
				if (b) return b;
				b = new Binding(path);
				bindingCache[path] = b;
				return b;
			}

			if (isObject(path) && isString(path.bind)) return this.get(path.bind);
			if (path instanceof Binding) return path;
			throw new Error("Invalid binding definition provided.");
		};

		return Binding;
	})();
function isBinding(value) {
	if (isObject(value) && isString(value.bind)) return true;
	return value instanceof Binding;
}

function _defineProperty(obj, key, value) {
	if (key in obj) {
		Object.defineProperty(obj, key, {
			value: value,
			enumerable: true,
			configurable: true,
			writable: true
		});
	} else {
		obj[key] = value;
	}

	return obj;
}

function _objectSpread(target) {
	for (var i = 1; i < arguments.length; i++) {
		var source = arguments[i] != null ? arguments[i] : {};
		var ownKeys = Object.keys(source);

		if (typeof Object.getOwnPropertySymbols === "function") {
			ownKeys = ownKeys.concat(
				Object.getOwnPropertySymbols(source).filter(function(sym) {
					return Object.getOwnPropertyDescriptor(source, sym).enumerable;
				})
			);
		}

		ownKeys.forEach(function(key) {
			_defineProperty(target, key, source[key]);
		});
	}

	return target;
}

function _inheritsLoose(subClass, superClass) {
	subClass.prototype = Object.create(superClass.prototype);
	subClass.prototype.constructor = subClass;
	subClass.__proto__ = superClass;
}

function _setPrototypeOf(o, p) {
	_setPrototypeOf =
		Object.setPrototypeOf ||
		function _setPrototypeOf(o, p) {
			o.__proto__ = p;
			return o;
		};

	return _setPrototypeOf(o, p);
}

function isNativeReflectConstruct() {
	if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	if (Reflect.construct.sham) return false;
	if (typeof Proxy === "function") return true;

	try {
		Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
		return true;
	} catch (e) {
		return false;
	}
}

function _construct(Parent, args, Class) {
	if (isNativeReflectConstruct()) {
		_construct = Reflect.construct;
	} else {
		_construct = function _construct(Parent, args, Class) {
			var a = [null];
			a.push.apply(a, args);
			var Constructor = Function.bind.apply(Parent, a);
			var instance = new Constructor();
			if (Class) _setPrototypeOf(instance, Class.prototype);
			return instance;
		};
	}

	return _construct.apply(null, arguments);
}

function _assertThisInitialized(self) {
	if (self === void 0) {
		throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	}

	return self;
}

function isFunction(f) {
	return typeof f === "function";
}

function computable() {
	var _ref;

	if (arguments.length == 0)
		throw new Error("computable requires at least a compute function to be passed in arguments.");
	var compute = ((_ref = arguments.length - 1), _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]);
	if (typeof compute != "function") throw new Error("Last argument to the computable function should be a function.");
	var inputs = [],
		a;

	for (var i = 0; i + 1 < arguments.length; i++) {
		a = i < 0 || arguments.length <= i ? undefined : arguments[i];
		if (isString(a)) inputs.push(Binding.get(a).value);
		else if (a.memoize) inputs.push(a.memoize());
		else if (isFunction(a)) inputs.push(a);
		else throw new Error("Invalid selector type '" + typeof a + "' received.");
	}

	function memoize(amnesia, warmupData) {
		var lastValue,
			lastArgs =
				warmupData &&
				inputs.map(function(s, i) {
					return s(warmupData);
				});
		return function(data) {
			var dirty = amnesia;

			if (!lastArgs) {
				lastArgs = Array.from({
					length: inputs.length
				});
				dirty = true;
			}

			for (var _i = 0; _i < inputs.length; _i++) {
				var v = inputs[_i](data);

				if (v !== lastArgs[_i]) dirty = true;
				lastArgs[_i] = v;
			}

			if (dirty) lastValue = compute.apply(null, lastArgs);
			return lastValue;
		};
	}

	var selector = memoize(true);
	selector.memoize = memoize;
	return selector;
}

var Console = {
	log: function log() {
		var _console;

		if (typeof window != "undefined" && window.console) (_console = console).log.apply(_console, arguments);
	},
	warn: function warn() {
		var _console2;

		if (typeof window != "undefined" && window.console) (_console2 = console).warn.apply(_console2, arguments);
	}
};

var activeFlags = {
	deprecated: true
};
function debug(flag) {
	if (process.env.NODE_ENV !== "production") {
		if (!activeFlags[flag]) return;
		Console.log.apply(Console, arguments);
	}
}

var globalCacheIdentifier = 1;
var GlobalCacheIdentifier =
	/*#__PURE__*/
	(function() {
		function GlobalCacheIdentifier() {}

		GlobalCacheIdentifier.get = function get() {
			return globalCacheIdentifier;
		};

		GlobalCacheIdentifier.change = function change() {
			globalCacheIdentifier++;
		};

		return GlobalCacheIdentifier;
	})();

function isNumber(n) {
	return typeof n === "number";
}

function isUndefined(v) {
	return v === undefined;
}

function isArray(a) {
	return Array.isArray(a);
}

var defaultFormatter = function defaultFormatter(v) {
	return v.toString();
};

var formatFactory = {
	string: function string() {
		return defaultFormatter;
	},
	wrap: function wrap(part0, prefix, suffix) {
		if (!prefix) prefix = "";
		if (!suffix) suffix = "";
		return function(value) {
			return prefix + value.toString() + suffix;
		};
	},
	fixed: function fixed(part0, digits) {
		return function(value) {
			return value.toFixed(digits);
		};
	},
	prefix: function prefix(part0, _prefix) {
		if (!_prefix) _prefix = "";
		return function(value) {
			return _prefix + value.toString();
		};
	},
	suffix: function suffix(part0, _suffix) {
		if (!_suffix) _suffix = "";
		return function(value) {
			return value.toString() + _suffix;
		};
	},
	uppercase: function uppercase() {
		return function(value) {
			return value.toString().toUpperCase();
		};
	},
	lowercase: function lowercase() {
		return function(value) {
			return value.toString().toLowerCase();
		};
	},
	urlencode: function urlencode() {
		return function(value) {
			return encodeURIComponent(value);
		};
	},
	number: function number(part0, minFractionDigits, maxFractionDigits) {
		var _resolveMinMaxFractio = resolveMinMaxFractionDigits(minFractionDigits, maxFractionDigits),
			minimumFractionDigits = _resolveMinMaxFractio.minimumFractionDigits,
			maximumFractionDigits = _resolveMinMaxFractio.maximumFractionDigits;

		var trimmable = maximumFractionDigits - minimumFractionDigits;

		if (trimmable > 0) {
			if (minimumFractionDigits == 0) ++trimmable;
			return function(value) {
				return trimFractionZeros(value.toFixed(maximumFractionDigits), trimmable);
			};
		}

		return function(value) {
			return value.toFixed(maximumFractionDigits);
		};
	},
	percentage: function percentage(part0, minFractionDigits, maxFractionDigits) {
		var numberFormatter = formatFactory.number(part0, minFractionDigits, maxFractionDigits);
		return function(value) {
			return numberFormatter(value * 100) + "%";
		};
	},
	percentageSign: function percentageSign(part0, minFractionDigits, maxFractionDigits) {
		var numberFormatter = formatFactory.number(part0, minFractionDigits, maxFractionDigits);
		return function(value) {
			return numberFormatter(value) + "%";
		};
	},
	date: function date() {
		return function(value) {
			var date = new Date(value);
			return date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear();
		};
	},
	time: function time() {
		return function(value) {
			var date = new Date(value);
			var h = date.getHours() >= 10 ? date.getHours() : "0" + date.getHours();
			var m = date.getMinutes() >= 10 ? date.getMinutes() : "0" + date.getMinutes();
			return h + ":" + m;
		};
	},
	datetime: function datetime() {
		var date = formatFactory.date();
		var time = formatFactory.time();
		return function(value) {
			return date(value) + " " + time(value);
		};
	},
	ellipsis: function ellipsis(part0, length, where) {
		length = Number(length);
		if (!(length > 3)) length = 10;

		switch (where) {
			default:
			case "end":
				return function(value) {
					var s = String(value);
					if (s.length > length) return s.substring(0, length - 3) + "...";
					return s;
				};

			case "start":
				return function(value) {
					var s = String(value);
					if (s.length > length) return "..." + s.substring(s.length - length + 3);
					return s;
				};

			case "middle":
				return function(value) {
					var s = String(value);

					if (s.length > length) {
						var x = Math.floor(length - 2) / 2;
						return s.substring(0, x) + "..." + s.substring(s.length - (length - 3 - x));
					}

					return s;
				};
		}
	}
};
formatFactory.s = formatFactory.str = formatFactory.string;
formatFactory.f = formatFactory.fixed;
formatFactory.n = formatFactory.number;
formatFactory.p = formatFactory.percentage;
formatFactory.ps = formatFactory.percentageSign;
formatFactory.d = formatFactory.date;
formatFactory.t = formatFactory.time;
formatFactory.dt = formatFactory.datetime;

function buildFormatter(format) {
	var formatter = defaultFormatter,
		nullText = "";

	if (format) {
		var pipeParts = format.split("|");
		nullText = pipeParts[1] || "";
		var colonSepParts = pipeParts[0].split(":");

		for (var i = 0; i < colonSepParts.length; i++) {
			var parts = colonSepParts[i].split(";");
			var factory = formatFactory[parts[0]];
			if (!factory) debug("Unknown string format: " + format);
			else if (i == 0) formatter = factory.apply(void 0, parts);
			else {
				(function() {
					var outerFmt = factory.apply(void 0, parts);
					var innerFmt = formatter;

					formatter = function formatter(v) {
						return outerFmt(innerFmt(v));
					};
				})();
			}
		}
	}

	return function(v) {
		return v == null || v === "" ? nullText : formatter(v);
	};
}

var format = {
	cache: {}
};

function getFormatCache() {
	if (format.cacheIdentifier != GlobalCacheIdentifier.get()) {
		format = {
			cache: {},
			cacheIdentifier: GlobalCacheIdentifier.get()
		};
	}

	return format.cache;
}

function getFormatter(format) {
	if (!format) format = "";
	var formatCache = getFormatCache();
	var formatter = formatCache[format];
	if (!formatter) formatter = formatCache[format] = buildFormatter(format);
	return formatter;
}

var Format =
	/*#__PURE__*/
	(function() {
		function Format() {}

		Format.value = function value(v, format) {
			var formatter = getFormatter(format);
			return formatter(v);
		};

		Format.parse = function parse(format) {
			return getFormatter(format);
		};

		Format.register = function register(format, formatter) {
			this.registerFactory(format, function() {
				return formatter;
			});
		};

		Format.registerFactory = function registerFactory(format, factory) {
			var _this = this;

			if (isArray(format))
				format.forEach(function(f) {
					return _this.registerFactory(f, factory);
				});
			else formatFactory[format] = factory;
		};

		return Format;
	})();
function resolveMinMaxFractionDigits(minimumFractionDigits, maximumFractionDigits) {
	minimumFractionDigits = minimumFractionDigits != null ? Number(minimumFractionDigits) : minimumFractionDigits;
	maximumFractionDigits = maximumFractionDigits != null ? Number(maximumFractionDigits) : maximumFractionDigits;

	if (isNumber(minimumFractionDigits)) {
		if (isUndefined(maximumFractionDigits)) maximumFractionDigits = minimumFractionDigits;
		else if (isNumber(maximumFractionDigits) && maximumFractionDigits < minimumFractionDigits)
			maximumFractionDigits = minimumFractionDigits;
	} else if (minimumFractionDigits == null && maximumFractionDigits == null) {
		minimumFractionDigits = 0;
		maximumFractionDigits = 18;
	}

	return {
		minimumFractionDigits: minimumFractionDigits,
		maximumFractionDigits: maximumFractionDigits
	};
}
function trimFractionZeros(str, max) {
	var cnt = 0,
		l = str.length;

	while (cnt < max && (str[l - 1 - cnt] === "0" || str[l - 1 - cnt] === ".")) {
		cnt++;
	}

	return cnt > 0 ? str.substring(0, l - cnt) : str;
}

function quoteStr(str) {
	if (str == null) return str;
	return "'" + str.replace(/'/g, "\\i") + "'";
}

function isDigit(x) {
	return x >= "0" && x <= "9";
}

/*
   Helper usage example

   Expression.registerHelper('_', _);
   let e = Expression.compile('_.min({data})');
 */

var expCache = {},
	helpers = {},
	helperNames = [],
	helperValues = [],
	expFatArrows = null;

function getExpr(expr) {
	if (expr.memoize) return expr;

	function memoize() {
		var lastValue,
			lastRunBindings = {},
			lastRunResults = {},
			getters = {},
			currentData,
			len = -1;

		var get = function get(bindingWithFormat) {
			var getter = getters[bindingWithFormat];

			if (!getter) {
				var binding = bindingWithFormat,
					format;
				var colonIndex = bindingWithFormat.indexOf(":");

				if (colonIndex != -1) {
					format = Format.parse(bindingWithFormat.substring(colonIndex + 1));
					binding = bindingWithFormat.substring(0, colonIndex);
				} else {
					var nullSeparatorIndex = bindingWithFormat.indexOf(":");

					if (nullSeparatorIndex != -1) {
						format = Format.parse(bindingWithFormat.substring(nullSeparatorIndex));
						binding = bindingWithFormat.substring(0, nullSeparatorIndex - 1);
					}
				}

				var b = Binding.get(binding);

				getter = function getter(data) {
					var value = b.value(data);
					lastRunBindings[len] = b.value;
					lastRunResults[len] = value;
					len++;
					return value;
				};

				if (format) {
					var valueGetter = getter;

					getter = function getter(data) {
						return format(valueGetter(data));
					};
				}

				getters[bindingWithFormat] = getter;
			}

			return getter(currentData);
		};

		return function(data) {
			var i = 0;

			for (; i < len; i++) {
				if (lastRunBindings[i](data) !== lastRunResults[i]) break;
			}

			if (i !== len) {
				len = 0;
				currentData = data;
				lastValue = expr(get);
			}

			return lastValue;
		};
	}

	var result = memoize();
	result.memoize = memoize;
	return result;
}

function expression(str) {
	var _ref;

	if (isFunction(str)) return getExpr(str);
	var r = expCache[str];
	if (r) return r;
	var quote = false;
	var termStart = -1,
		curlyBrackets = 0,
		percentExpression;
	var fb = ["return ("];
	var args = {};
	var formats = [];
	var subExpr = 0;

	for (var i = 0; i < str.length; i++) {
		var c = str[i];

		switch (c) {
			case "{":
				if (curlyBrackets > 0) curlyBrackets++;
				else {
					if (!quote && termStart < 0 && (str[i + 1] != "{" || str[i - 1] == "%")) {
						termStart = i + 1;
						curlyBrackets = 1;
						percentExpression = str[i - 1] == "%";
						if (percentExpression) fb.pop(); //%
					} else if (str[i - 1] != "{") fb.push(c);
				}
				break;

			case "}":
				if (termStart >= 0) {
					if (--curlyBrackets == 0) {
						var term = str.substring(termStart, i);
						var formatStart = 0;
						if (term[0] == "[") formatStart = term.indexOf("]");
						var colon = term.indexOf(":", formatStart > 0 ? formatStart : 0);
						var binding = colon == -1 ? term : term.substring(0, colon);
						var format = colon == -1 ? null : term.substring(colon + 1);

						if (colon == -1) {
							var nullSepIndex = binding.indexOf("|");

							if (nullSepIndex != -1) {
								format = binding.substring(nullSepIndex);
								binding = binding.substring(0, nullSepIndex);
							}
						}

						var argName = binding.replace(/\./g, "_");
						if (isDigit(argName[0])) argName = "$" + argName;

						if (percentExpression || (binding[0] == "[" && binding[binding.length - 1] == "]")) {
							argName = "expr" + ++subExpr;
							args[argName] = expression(percentExpression ? binding : binding.substring(1, binding.length - 1));
						} else args[argName] = binding;

						if (format) {
							var formatter = "fmt" + formats.length;
							fb.push(formatter, "(", argName, ", ", quoteStr(format), ")");
							formats.push(Format.parse(format));
						} else fb.push(argName);

						termStart = -1;
					}
				} else fb.push(c);

				break;

			case '"':
			case "'":
				if (curlyBrackets == 0) {
					if (!quote) quote = c;
					else if (str[i - 1] != "\\" && quote == c) quote = false;
					fb.push(c);
				}

				break;

			default:
				if (termStart < 0) fb.push(c);
				break;
		}
	}

	fb.push(")");
	var body = fb.join("");
	if (expFatArrows) body = expFatArrows(body); //console.log(body);

	var keys = Object.keys(args);

	var compute = (_ref = _construct(
		Function,
		formats
			.map(function(f, i) {
				return "fmt" + i;
			})
			.concat(keys, helperNames, [body])
	)).bind.apply(_ref, [Format].concat(formats, helperValues));

	var selector = computable.apply(
		void 0,
		keys
			.map(function(k) {
				return args[k];
			})
			.concat([compute])
	);
	expCache[str] = selector;
	return selector;
}
var Expression = {
	get: function get(str) {
		return expression(str);
	},
	compile: function compile(str) {
		return this.get(str).memoize();
	},
	registerHelper: function registerHelper(name, helper) {
		helpers[name] = helper;
		helperNames = Object.keys(helpers);
		helperValues = helperNames.map(function(n) {
			return helpers[n];
		});
	}
};
function plugFatArrowExpansion(impl) {
	expFatArrows = impl;
}
function invalidateExpressionCache() {
	expCache = {};
}

function plus(str) {
	return str.length ? str + " + " : str;
}

var tplCache = {};
function stringTemplate(str) {
	var expr = tplCache[str];
	if (expr) return expr;
	expr = "";
	var termStart = -1,
		quoteStart = 0,
		term,
		bracketsOpen = 0,
		percentSign;

	for (var i = 0; i < str.length; i++) {
		var c = str[i];

		switch (c) {
			case "{":
				if (termStart < 0) {
					if (str[i + 1] == "{" && str[i - 1] != "%") {
						expr = plus(expr) + quoteStr(str.substring(quoteStart, i) + "{");
						i++;
						quoteStart = i + 1;
					} else {
						termStart = i + 1;
						percentSign = str[i - 1] == "%";
						if (i > quoteStart) expr = plus(expr) + quoteStr(str.substring(quoteStart, percentSign ? i - 1 : i));
						bracketsOpen = 1;
					}
				} else bracketsOpen++;

				break;

			case "}":
				if (termStart >= 0) {
					if (--bracketsOpen == 0) {
						term = str.substring(termStart, i);

						if (term.indexOf(":") == -1) {
							var nullSepIndex = term.indexOf("|");
							if (nullSepIndex == -1) term += ":s";
							else term = term.substring(0, nullSepIndex) + ":s" + term.substring(nullSepIndex);
						}

						expr = plus(expr) + (percentSign ? "%{" : "{") + term + "}";
						termStart = -1;
						quoteStart = i + 1;
						bracketsOpen = 0;
					}
				} else if (str[i + 1] == "}") {
					expr = plus(expr) + quoteStr(str.substring(quoteStart, i) + "}");
					i++;
					quoteStart = i + 1;
				}

				break;
		}
	}

	if (quoteStart < str.length) expr = plus(expr) + quoteStr(str.substring(quoteStart)); //console.log(expr);

	return (tplCache[str] = expression(expr));
}
var StringTemplate = {
	get: function get(str) {
		return stringTemplate(str);
	},
	compile: function compile(str) {
		return stringTemplate(str).memoize();
	},
	format: function format(_format) {
		for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			args[_key - 1] = arguments[_key];
		}

		return stringTemplate(_format)(args);
	}
};
function invalidateStringTemplateCache() {
	tplCache = {};
}

function isDefined(v) {
	return v !== undefined;
}

var componentAlias = {};
var Component =
	/*#__PURE__*/
	(function() {
		function Component(config) {
			if (config && config.$props) {
				Object.assign(config, config.$props);
				delete config.$props;
			}

			Object.assign(this, config);
		}

		Component.alias = function alias(_alias, type) {
			var _this = this;

			if (type) {
				type.prototype.componentAlias = _alias;
				componentAlias[this.namespace + _alias] = type;
			} else //decorator usage
				return function(t) {
					_this.alias(_alias, t);

					return t;
				};
		};

		Component.create = function create(typeAlias, config, more) {
			var _this2 = this;

			if (!typeAlias) return this.factory(typeAlias, config, more);
			if (typeAlias.isComponent) return typeAlias;
			if (isComponentFactory(typeAlias)) return this.create(typeAlias.create(config));
			if (isArray(typeAlias))
				return typeAlias.map(function(c) {
					return _this2.create(c, config, more);
				});
			if (typeAlias.$type) return this.create(typeAlias.$type, typeAlias, config);
			if (typeAlias.type) return this.create(typeAlias.type, typeAlias, config);
			var cmpType, alias;
			if (typeAlias.isComponentType) cmpType = typeAlias;
			else if (isFunction(typeAlias)) {
				if (this.factory) return this.factory(typeAlias, config, more);
				throw new Error("Unsupported component type " + typeAlias + ".");
			} else if (isString(typeAlias)) {
				alias = this.namespace + typeAlias;
				cmpType = componentAlias[alias];

				if (!cmpType) {
					if (typeAlias && this.factory) return this.factory(typeAlias, config, more);
					throw new Error("Unknown component alias " + alias + ".");
				}
			} else if (typeof typeAlias == "object") {
				cmpType = typeAlias.type || typeAlias.$type;

				if (!cmpType) {
					cmpType = this;
					more = more ? Object.assign({}, config, more) : config;
					config = typeAlias;
				}
			}
			if (isArray(config))
				return config.map(function(cfg) {
					return _this2.create(cmpType, cfg, more);
				});
			var cfg = config;
			if (more) cfg = Object.assign({}, config, more);
			var cmp = new cmpType(cfg);
			if (cmpType.autoInit && cmp.init) cmp.init();
			return cmp;
		};

		return Component;
	})();
Component.prototype.isComponent = true;
Component.isComponentType = true;
Component.namespace = "";
Component.autoInit = false;

Component.factory = function(alias, config, more) {
	throw new Error("Unknown component alias " + alias + ".");
};
function isComponentFactory(factory) {
	return factory && factory.$isComponentFactory;
}

var Ref =
	/*#__PURE__*/
	(function(_Component) {
		_inheritsLoose(Ref, _Component);

		function Ref(config) {
			var _context;

			var _this;

			_this = _Component.call(this, config) || this;
			_this.get = (_context = _this).get.bind(_context);
			_this.set = (_context = _this).set.bind(_context);
			return _this;
		}

		var _proto = Ref.prototype;

		_proto.get = function get() {
			return this.store.get(this.path);
		};

		_proto.set = function set(value) {
			return this.store.set(this.path, value);
		};

		_proto.init = function init(value) {
			return this.store.init(this.path, value);
		};

		_proto.toggle = function toggle() {
			return this.store.toggle(this.path);
		};

		_proto.delete = function _delete() {
			return this.store.delete(this.path);
		};

		_proto.update = function update() {
			var _this$store;

			for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return (_this$store = this.store).update.apply(_this$store, [this.path].concat(args));
		};

		_proto.as = function as(config) {
			return Ref.create(config, {
				store: this.store,
				path: this.path
			});
		}; //allows the function to be passed as a selector, e.g. to computable or addTrigger

		_proto.memoize = function memoize() {
			return this.get;
		};

		return Ref;
	})(Component);

Ref.factory = function(alias, config, more) {
	if (isFunction(alias)) {
		var cfg = _objectSpread({}, config, more);

		if (cfg.store) Object.assign(cfg, cfg.store.getMethods());
		var result = alias(cfg);
		if (result instanceof Ref) return result;
		return Ref.create(_objectSpread({}, config, more, result));
	}

	return Ref.create(_objectSpread({}, config, more));
};

var View =
	/*#__PURE__*/
	(function() {
		function View(config) {
			Object.assign(this, config);
			this.cache = {
				version: -1
			};
			if (this.store) this.setStore(this.store);
		}

		var _proto = View.prototype;

		_proto.getData = function getData() {
			throw new Error("abstract method");
		};

		_proto.init = function init(path, value) {
			if (path instanceof Binding) path = path.path;
			else if (typeof path == "object" && path != null) {
				var changed = false;

				for (var key in path) {
					if (path.hasOwnProperty(key) && this.get(key) === undefined && this.setItem(key, path[key])) changed = true;
				}

				return changed;
			}
			if (this.get(path) === undefined) return this.setItem(path, value);
			return false;
		};

		_proto.set = function set(path, value) {
			if (path instanceof Binding) path = path.path;
			else if (typeof path == "object" && path != null) {
				var changed = false;

				for (var key in path) {
					if (path.hasOwnProperty(key) && this.setItem(key, path[key])) changed = true;
				}

				return changed;
			}
			return this.setItem(path, value);
		};

		_proto.copy = function copy(from, to) {
			var value = this.get(from);
			this.set(to, value);
		};

		_proto.move = function move(from, to) {
			var _this = this;

			this.batch(function() {
				_this.copy(from, to);

				_this.delete(from);
			});
		}; //protected

		_proto.setItem = function setItem(path, value) {
			if (this.store) return this.store.setItem(path, value);
			throw new Error("abstract method");
		};

		_proto.delete = function _delete(path) {
			var _this2 = this;

			if (path instanceof Binding) path = path.path;
			else if (arguments.length > 1) path = Array.from(arguments);
			if (isArray(path))
				return path
					.map(function(arg) {
						return _this2.deleteItem(arg);
					})
					.some(Boolean);
			return this.deleteItem(path);
		}; //protected

		_proto.deleteItem = function deleteItem(path) {
			if (this.store) return this.store.deleteItem(path);
			throw new Error("abstract method");
		};

		_proto.clear = function clear() {
			if (this.store) return this.store.clear();
			throw new Error("abstract method");
		};

		_proto.get = function get(path) {
			var storeData = this.getData();
			if (arguments.length > 1) path = Array.from(arguments);
			if (isArray(path))
				return path.map(function(arg) {
					return Binding.get(arg).value(storeData);
				});
			return Binding.get(path).value(storeData);
		};

		_proto.toggle = function toggle(path) {
			return this.set(path, !this.get(path));
		};

		_proto.update = function update(path, updateFn) {
			for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
				args[_key - 2] = arguments[_key];
			}

			return this.set(path, updateFn.apply(null, [this.get(path)].concat(args)));
		};

		_proto.batch = function batch(callback) {
			var dirty = this.silently(callback);
			if (dirty) this.notify();
			return dirty;
		};

		_proto.silently = function silently(callback) {
			if (this.store) return this.store.silently(callback);
			throw new Error("abstract method");
		};

		_proto.notify = function notify(path) {
			if (this.notificationsSuspended) this.dirty = true;
			else this.doNotify(path);
		};

		_proto.doNotify = function doNotify(path) {
			if (this.store) return this.store.notify(path);
			throw new Error("abstract method");
		};

		_proto.subscribe = function subscribe(callback) {
			if (this.store) return this.store.subscribe(callback);
			throw new Error("abstract method");
		};

		_proto.load = function load(data) {
			return this.batch(function(store) {
				for (var key in data) {
					store.set(key, data[key]);
				}
			});
		};

		_proto.dispatch = function dispatch(action) {
			if (this.store) return this.store.dispatch(action);
			throw new Error("The underlying store doesn't support dispatch.");
		};

		_proto.getMeta = function getMeta() {
			return this.meta;
		};

		_proto.setStore = function setStore(store) {
			this.store = store;
			this.meta = store.getMeta();
		};

		_proto.ref = function ref(path, defaultValue) {
			if (isDefined(defaultValue)) this.init(path, defaultValue);
			return Ref.create({
				store: this,
				path: path
			});
		};

		_proto.getMethods = function getMethods() {
			return {
				getData: this.getData.bind(this),
				set: this.set.bind(this),
				get: this.get.bind(this),
				update: this.update.bind(this),
				delete: this.delete.bind(this),
				toggle: this.toggle.bind(this),
				init: this.init.bind(this),
				ref: this.ref.bind(this)
			};
		};

		return View;
	})();
View.prototype.sealed = false; //indicate that data should be copied before virtual items are added

var SubscriberList =
	/*#__PURE__*/
	(function() {
		function SubscriberList() {
			this.clear();
		}

		var _proto = SubscriberList.prototype;

		_proto.getSlot = function getSlot() {
			if (this.freeSlots.length) return this.freeSlots.pop();
			var slot = String(this.nextSlot++);
			return slot;
		};

		_proto.recycle = function recycle(slot, callback) {
			if (this.subscriptions[slot] === callback) {
				this.freeSlots.push(slot);
				delete this.subscriptions[slot];
				this.subscriptionCount--;
			}
		};

		_proto.subscribe = function subscribe(callback) {
			var _this = this;

			var slot = this.getSlot();
			this.subscriptions[slot] = callback;
			this.subscriptionCount++;
			return function() {
				_this.recycle(slot, callback);
			};
		};

		_proto.clear = function clear() {
			this.subscriptions = {};
			this.freeSlots = [];
			this.nextSlot = 1;
			this.subscriptionCount = 0;
		};

		_proto.isEmpty = function isEmpty() {
			return this.subscriptionCount == 0;
		};

		_proto.getSubscribers = function getSubscribers() {
			var result = [];

			for (var key in this.subscriptions) {
				result.push(this.subscriptions[key]);
			}

			return result;
		};

		_proto.notify = function notify() {
			for (var key in this.subscriptions) {
				var _this$subscriptions;

				(_this$subscriptions = this.subscriptions)[key].apply(_this$subscriptions, arguments);
			}
		};

		_proto.execute = function execute(callback) {
			for (var key in this.subscriptions) {
				callback(this.subscriptions[key]);
			}
		};

		return SubscriberList;
	})();

var SubscribableView =
	/*#__PURE__*/
	(function(_View) {
		_inheritsLoose(SubscribableView, _View);

		function SubscribableView(config) {
			var _this;

			_this = _View.call(this, config) || this;
			_this.subscribers = new SubscriberList();
			_this.changes = [];
			return _this;
		}

		var _proto = SubscribableView.prototype;

		_proto.subscribe = function subscribe(callback) {
			return this.subscribers.subscribe(callback);
		};

		_proto.unsubscribeAll = function unsubscribeAll() {
			this.subscribers.clear();
		};

		_proto.doNotify = function doNotify(path) {
			var _this2 = this;

			if (this.notificationsSuspended) return;

			if (!this.async) {
				this.subscribers.notify([path]);
			} else {
				this.changes.push(path || "");

				if (!this.scheduled) {
					this.scheduled = true;
					setTimeout(function() {
						_this2.scheduled = false;
						var changes = _this2.changes;
						_this2.changes = [];

						_this2.subscribers.notify(changes);
					}, 0);
				}
			}
		};

		_proto.silently = function silently(callback) {
			this.notificationsSuspended = (this.notificationsSuspended || 0) + 1;
			var wasDirty = this.dirty,
				dirty;
			this.dirty = false;

			try {
				callback(this);
			} finally {
				this.notificationsSuspended--;
				dirty = this.dirty;
				this.dirty = wasDirty;
			}

			return dirty;
		};

		return SubscribableView;
	})(View);
SubscribableView.prototype.async = false;

var Store =
	/*#__PURE__*/
	(function(_SubscribableView) {
		_inheritsLoose(Store, _SubscribableView);

		function Store(config) {
			var _this;

			if (config === void 0) {
				config = {};
			}

			_this = _SubscribableView.call(this, config) || this;
			_this.data = config.data || {};
			_this.meta = {
				version: 0
			};
			return _this;
		}

		var _proto = Store.prototype;

		_proto.getData = function getData() {
			return this.data;
		};

		_proto.setItem = function setItem(path, value) {
			var next = Binding.get(path).set(this.data, value);

			if (next != this.data) {
				this.data = next;
				this.meta.version++;
				this.notify(path);
				return true;
			}

			return false;
		};

		_proto.deleteItem = function deleteItem(path) {
			var next = Binding.get(path).delete(this.data);

			if (next != this.data) {
				this.data = next;
				this.meta.version++;
				this.notify(path);
				return true;
			}

			return false;
		};

		_proto.clear = function clear() {
			this.data = {};
			this.meta.version++;
			this.notify();
		};

		return Store;
	})(SubscribableView);
Store.prototype.async = false;

var ExposedRecordView =
	/*#__PURE__*/
	(function(_View) {
		_inheritsLoose(ExposedRecordView, _View);

		function ExposedRecordView() {
			return _View.apply(this, arguments) || this;
		}

		var _proto = ExposedRecordView.prototype;

		_proto.getData = function getData() {
			if (this.sealed && this.meta.version === this.cache.version && this.cache.itemIndex === this.itemIndex)
				return this.cache.result;
			this.cache.result = this.embed(this.store.getData());
			this.cache.version = this.meta.version;
			this.cache.itemIndex = this.itemIndex;
			return this.cache.result;
		};

		_proto.embed = function embed(data) {
			var collection = this.collectionBinding.value(data);
			var record = collection[this.itemIndex];
			var copy = this.sealed || this.immutable || this.store.sealed ? _objectSpread({}, data) : data;
			copy[this.recordName] = record;
			if (this.indexName) copy[this.indexName] = this.itemIndex;
			return copy;
		};

		_proto.setIndex = function setIndex(index) {
			this.itemIndex = index;
		};

		_proto.setItem = function setItem(path, value) {
			if (path == this.recordName || path.indexOf(this.recordName + ".") == 0) {
				var storeData = this.store.getData();
				var collection = this.collectionBinding.value(storeData);
				var data = this.embed(storeData);
				var d = Binding.get(path).set(data, value);
				if (d === data) return false;
				var record = d[this.recordName];
				var newCollection = [].concat(
					collection.slice(0, this.itemIndex),
					[record],
					collection.slice(this.itemIndex + 1)
				);
				return this.store.setItem(this.collectionBinding.path, newCollection);
			}

			return this.store.setItem(path, value);
		};

		_proto.deleteItem = function deleteItem(path) {
			var storeData, collection, newCollection;

			if (path == this.recordName) {
				storeData = this.store.getData();
				collection = this.collectionBinding.value(storeData);
				newCollection = [].concat(collection.slice(0, this.itemIndex), collection.slice(this.itemIndex + 1));
				return this.store.setItem(this.collectionBinding.path, newCollection);
			} else if (path.indexOf(this.recordName + ".") == 0) {
				storeData = this.store.getData();
				collection = this.collectionBinding.value(storeData);
				var data = this.embed(storeData);
				var d = Binding.get(path).delete(data);
				if (d === data) return false;
				var record = d[this.recordName];
				newCollection = [].concat(collection.slice(0, this.itemIndex), [record], collection.slice(this.itemIndex + 1));
				return this.store.setItem(this.collectionBinding.path, newCollection);
			}

			return this.store.deleteItem(path);
		};

		return ExposedRecordView;
	})(View);
ExposedRecordView.prototype.immutable = false;

var ExposedValueView =
	/*#__PURE__*/
	(function(_View) {
		_inheritsLoose(ExposedValueView, _View);

		function ExposedValueView() {
			return _View.apply(this, arguments) || this;
		}

		var _proto = ExposedValueView.prototype;

		_proto.getData = function getData() {
			if (this.sealed && this.meta.version === this.cache.version && this.cache.key === this.key)
				return this.cache.result;
			var data = this.store.getData();
			var container = this.containerBinding.value(data) || {};
			var record = container[this.key];
			this.cache.version = this.meta.version;
			this.cache.key = this.key;
			this.cache.result = this.sealed || this.immutable || this.store.sealed ? _objectSpread({}, data) : data;
			this.cache.result[this.recordName] = record;
			return this.cache.result;
		};

		_proto.setKey = function setKey(key) {
			this.key = key;
		};

		_proto.getKey = function getKey() {
			return this.key;
		};

		_proto.setItem = function setItem(path, value) {
			if (path == this.recordName || path.indexOf(this.recordName + ".") == 0) {
				var data = this.getData();
				var d = Binding.get(path).set(data, value);
				if (d === data) return false;
				var container = this.containerBinding.value(d);
				var record = d[this.recordName];
				var newContainer = Object.assign({}, container);
				newContainer[this.key] = record;
				return this.store.setItem(this.containerBinding.path, newContainer);
			}

			return this.store.setItem(path, value);
		};

		_proto.deleteItem = function deleteItem(path) {
			var data, container, newContainer;

			if (path == this.recordName) {
				data = this.getData();
				container = this.containerBinding.value(data);
				if (!container || !container.hasOwnProperty(path)) return false;
				newContainer = Object.assign({}, container);
				delete newContainer[this.key];
				this.store.set(this.containerBinding.path, newContainer);
			} else if (path.indexOf(this.recordName + ".") == 0) {
				data = this.getData();
				var d = Binding.get(path).delete(data);
				if (d === data) return false;
				container = this.containerBinding.value(d);
				var record = d[this.recordName];
				newContainer = Object.assign({}, container);
				newContainer[this.key] = record;
				return this.store.setItem(this.containerBinding.path, newContainer);
			}

			return this.store.deleteItem(path);
		};

		return ExposedValueView;
	})(View);
ExposedValueView.prototype.immutable = false;

var ReadOnlyDataView =
	/*#__PURE__*/
	(function(_View) {
		_inheritsLoose(ReadOnlyDataView, _View);

		function ReadOnlyDataView() {
			return _View.apply(this, arguments) || this;
		}

		var _proto = ReadOnlyDataView.prototype;

		_proto.getData = function getData() {
			if (this.sealed && this.meta.version === this.cache.version && this.cache.data === this.data)
				return this.cache.result;
			var data = this.store.getData();
			this.cache.result =
				this.sealed || this.immutable || this.store.sealed
					? Object.assign({}, data, this.getAdditionalData(data))
					: Object.assign(data, this.getAdditionalData(data));
			this.cache.version = this.meta.version;
			this.cache.data = this.data;
			return this.cache.result;
		};

		_proto.getAdditionalData = function getAdditionalData() {
			return this.data;
		};

		_proto.setData = function setData(data) {
			this.data = data;
		};

		return ReadOnlyDataView;
	})(View);
ReadOnlyDataView.prototype.immutable = false;

var ZoomIntoPropertyView =
	/*#__PURE__*/
	(function(_View) {
		_inheritsLoose(ZoomIntoPropertyView, _View);

		function ZoomIntoPropertyView() {
			return _View.apply(this, arguments) || this;
		}

		var _proto = ZoomIntoPropertyView.prototype;

		_proto.getData = function getData() {
			if (this.cache.version != this.meta.version) {
				var _objectSpread2;

				var data = this.store.getData();
				var x = this.binding.value(data);
				if (x != null && typeof x != "object") throw new Error("Zoomed value must be an object.");
				this.cache.result = _objectSpread(
					{},
					x,
					((_objectSpread2 = {}),
					(_objectSpread2[this.rootName] = !this.store.sealed ? _objectSpread({}, data) : data),
					_objectSpread2)
				);
				this.cache.version = this.meta.version;
			}

			return this.cache.result;
		};

		_proto.setItem = function setItem(path, value) {
			if (path.indexOf(this.rootName + ".") == 0) this.store.setItem(path.substring(this.rootName.length + 1), value);
			else this.store.setItem(this.binding.path + "." + path, value);
		};

		_proto.deleteItem = function deleteItem(path) {
			if (path instanceof Binding) path = path.path;
			if (path.indexOf(this.rootName + ".") == 0) this.store.deleteItem(path.substring(this.rootName.length + 1));
			else this.store.deleteItem(this.binding.path + "." + path);
		};

		return ZoomIntoPropertyView;
	})(View);
ZoomIntoPropertyView.prototype.rootName = "$root";

function createStructuredSelector(selector, constants) {
	var keys = Object.keys(selector);
	if (keys.length == 0)
		return function() {
			return constants;
		};

	function memoize() {
		var lastResult = Object.assign({}, constants);
		var memoizedSelectors = {};
		keys.forEach(function(key) {
			memoizedSelectors[key] = selector[key].memoize ? selector[key].memoize() : selector[key];
		});
		return function(data) {
			var result = lastResult,
				k,
				v,
				i;

			for (i = 0; i < keys.length; i++) {
				k = keys[i];
				v = memoizedSelectors[k](data);

				if (result === lastResult) {
					if (v === lastResult[k]) continue;
					result = Object.assign({}, lastResult);
				}

				result[k] = v;
			}

			return (lastResult = result);
		};
	}

	function evaluate(data) {
		var result = Object.assign({}, constants);

		for (var i = 0; i < keys.length; i++) {
			result[keys[i]] = selector[keys[i]](data);
		}

		return result;
	}

	evaluate.memoize = memoize;
	return evaluate;
}

function isSelector(config) {
	if (config == null) return true;

	switch (typeof config) {
		case "object":
			if (config.type || config.$type) return false;
			return !!(config.bind || config.tpl || config.expr || config.get);

		case "function":
			return true;

		case "string":
			return true;

		case "number":
			return true;

		case "boolean":
			return true;
	}

	return false;
}

var nullF = function nullF() {
	return null;
};

function getSelector(config) {
	if (config == null) return nullF;

	switch (typeof config) {
		case "object":
			if (isArray(config)) {
				var _selectors = config.map(function(x) {
					return getSelector(x);
				});

				return function(data) {
					return _selectors.map(function(elementSelector) {
						return elementSelector(data);
					});
				};
			}

			if (config.bind) return Binding.get(config.bind).value;
			if (config.tpl) return StringTemplate.get(config.tpl);
			if (config.expr) return Expression.get(config.expr);
			if (config.get) return config.get;
			var selectors = {};
			var constants = {};

			for (var key in config) {
				if (isSelector(config[key])) selectors[key] = getSelector(config[key]);
				else constants[key] = config[key];
			}

			return createStructuredSelector(selectors, constants);

		case "function":
			return config;

		default:
			return function() {
				return config;
			};
	}
}

function defaultValue(pv) {
	if (typeof pv == "object" && pv && pv.structured) return pv.defaultValue;
	return pv;
}

function getSelectorConfig(props, values, nameMap) {
	var functions = {},
		structures = {},
		defaultValues = {},
		constants,
		p,
		v,
		pv,
		constant = true;

	for (p in props) {
		v = values[p];
		pv = props[p];
		if (isUndefined(v) && pv && (pv.bind || pv.tpl || pv.expr)) v = pv;

		if (v === null) {
			if (!constants) constants = {};
			constants[p] = null;
		} else if (typeof v == "object") {
			if (v.bind) {
				if (isUndefined(v.defaultValue) && v != pv) v.defaultValue = defaultValue(pv);
				if (isDefined(v.defaultValue)) defaultValues[v.bind] = v.defaultValue;
				nameMap[p] = v.bind;
				functions[p] = Binding.get(v.bind).value;
				constant = false;
			} else if (v.expr) {
				functions[p] = Expression.get(v.expr);
				constant = false;
			} else if (v.get) {
				functions[p] = v.get;
				constant = false;
			} else if (v.tpl) {
				functions[p] = StringTemplate.get(v.tpl);
				constant = false;
			} else if (pv && typeof pv == "object" && pv.structured) {
				if (isArray(v)) functions[p] = getSelector(v);
				else {
					var s = getSelectorConfig(v, v, {});
					structures[p] = s;
					Object.assign(defaultValues, s.defaultValues);
				}
				constant = false;
			} else {
				if (!constants) constants = {};
				constants[p] = v;
			}
		} else if (isFunction(v)) {
			functions[p] = v;
			constant = false;
		} else {
			if (isUndefined(v)) {
				if (isUndefined(pv)) continue;
				v = defaultValue(pv);
			}

			if (isUndefined(v)) continue;
			if (!constants) constants = {};
			constants[p] = v;
		}
	}

	return {
		functions: functions,
		structures: structures,
		defaultValues: defaultValues,
		constants: constants,
		constant: constant
	};
}

function createSelector(_ref) {
	var functions = _ref.functions,
		structures = _ref.structures,
		constants = _ref.constants,
		defaultValues = _ref.defaultValues;
	var selector = {};

	for (var n in functions) {
		selector[n] = functions[n];
	}

	for (var _n in structures) {
		selector[_n] = createSelector(structures[_n]);
	}

	return createStructuredSelector(selector, constants);
}

var StructuredSelector =
	/*#__PURE__*/
	(function() {
		function StructuredSelector(_ref2) {
			var props = _ref2.props,
				values = _ref2.values;
			this.nameMap = {};
			this.config = getSelectorConfig(props, values, this.nameMap);
		}

		var _proto = StructuredSelector.prototype;

		_proto.init = function init(store) {
			store.init(this.config.defaultValues);
		};

		_proto.create = function create() {
			var selector = createSelector(this.config);
			if (selector.memoize) return selector.memoize();
			return selector;
		};

		_proto.createStoreSelector = function createStoreSelector() {
			if (this.config.constant) {
				var result = _objectSpread({}, this.config.constants);

				return function() {
					return result;
				};
			}

			var selector = this.create();
			return function(store) {
				return selector(store.getData());
			};
		};

		return StructuredSelector;
	})();

var AggregateFunction =
	/*#__PURE__*/
	(function() {
		function AggregateFunction() {}

		AggregateFunction.sum = function sum() {
			return new Sum();
		};

		AggregateFunction.avg = function avg() {
			return new Avg();
		};

		AggregateFunction.count = function count() {
			return new Count();
		};

		AggregateFunction.distinct = function distinct() {
			return new Distinct();
		};

		AggregateFunction.min = function min() {
			return new Min();
		};

		AggregateFunction.max = function max() {
			return new Max();
		};

		return AggregateFunction;
	})();

var Sum =
	/*#__PURE__*/
	(function() {
		function Sum() {}

		var _proto = Sum.prototype;

		_proto.process = function process(value) {
			this.empty = false;
			if (!isNaN(value)) this.result += value;
			else this.invalid = true;
		};

		_proto.getResult = function getResult() {
			if (this.invalid) return null;
			return this.result;
		};

		return Sum;
	})();

Sum.prototype.result = 0;
Sum.prototype.empty = true;

var Avg =
	/*#__PURE__*/
	(function() {
		function Avg() {}

		var _proto2 = Avg.prototype;

		_proto2.process = function process(value, count) {
			if (count === void 0) {
				count = 1;
			}

			this.empty = false;

			if (!isNaN(value) && !isNaN(count)) {
				this.result += value * count;
				this.count += count;
			} else this.invalid = true;
		};

		_proto2.getResult = function getResult() {
			if (this.empty || this.invalid || this.count == 0) return null;
			return this.result / this.count;
		};

		return Avg;
	})();

Avg.prototype.result = 0;
Avg.prototype.count = 0;
Avg.prototype.empty = true;

var Count =
	/*#__PURE__*/
	(function() {
		function Count() {}

		var _proto3 = Count.prototype;

		_proto3.process = function process(value) {
			if (value != null) this.result++;
		};

		_proto3.getResult = function getResult() {
			return this.result;
		};

		return Count;
	})();

Count.prototype.result = 0;

var Distinct =
	/*#__PURE__*/
	(function() {
		function Distinct() {
			this.values = {};
		}

		var _proto4 = Distinct.prototype;

		_proto4.process = function process(value) {
			if (value == null || this.values[value]) return;
			this.values[value] = true;
			this.empty = false;
			this.result++;
		};

		_proto4.getResult = function getResult() {
			if (this.empty || this.invalid) return null;
			return this.result;
		};

		return Distinct;
	})();

Distinct.prototype.result = 0;
Distinct.prototype.empty = true;

var Max =
	/*#__PURE__*/
	(function() {
		function Max() {}

		var _proto5 = Max.prototype;

		_proto5.process = function process(value) {
			if (!isNaN(value)) {
				if (this.empty) this.result = value;
				else if (value > this.result) this.result = value;
				this.empty = false;
			} else if (value != null) this.invalid = true;
		};

		_proto5.getResult = function getResult() {
			if (this.empty || this.invalid) return null;
			return this.result;
		};

		return Max;
	})();

Max.prototype.result = 0;
Max.prototype.empty = true;

var Min =
	/*#__PURE__*/
	(function() {
		function Min() {}

		var _proto6 = Min.prototype;

		_proto6.process = function process(value) {
			if (!isNaN(value)) {
				if (this.empty) this.result = value;
				else if (value < this.result) this.result = value;
				this.empty = false;
			} else if (value != null) this.invalid = true;
		};

		_proto6.getResult = function getResult() {
			if (this.empty || this.invalid) return null;
			return this.result;
		};

		return Min;
	})();

Min.prototype.result = 0;
Min.prototype.empty = true;

/*
 'column': {
   index: 0,
   sort: 'asc',
   group: true
   aggregate: 'count'
 }
 */

function transform(o, f) {
	var res = {};

	for (var k in o) {
		res[k] = f(o[k], k);
	}

	return res;
}

var Grouper =
	/*#__PURE__*/
	(function() {
		function Grouper(key, aggregates, dataGetter, nameGetter) {
			this.keys = Object.keys(key).map(function(k) {
				return {
					name: k,
					value: getSelector(key[k])
				};
			});
			if (nameGetter) this.nameGetter = getSelector(nameGetter);

			this.dataGetter =
				dataGetter ||
				function(x) {
					return x;
				};

			this.aggregates =
				aggregates &&
				transform(aggregates, function(prop) {
					if (!AggregateFunction[prop.type]) throw new Error("Unknown aggregate function '" + prop.type + "'.");
					return {
						value: getSelector(prop.value),
						weight: getSelector(prop.weight || 1),
						type: prop.type
					};
				});
			this.reset();
		}

		var _proto = Grouper.prototype;

		_proto.reset = function reset() {
			this.groups = this.initGroup(this.keys.length == 0);
		};

		_proto.initGroup = function initGroup(leaf) {
			if (!leaf) return {};
			return {
				records: [],
				indexes: [],
				aggregates:
					this.aggregates &&
					transform(this.aggregates, function(prop) {
						var f = AggregateFunction[prop.type];
						return {
							processor: f(),
							value: prop.value,
							weight: prop.weight
						};
					})
			};
		};

		_proto.process = function process(record, index) {
			var data = this.dataGetter(record);
			var key = this.keys.map(function(k) {
				return k.value(data);
			});
			var g = this.groups;

			for (var i = 0; i < key.length; i++) {
				var sg = g[key[i]];

				if (!sg) {
					sg = g[key[i]] = this.initGroup(i + 1 == key.length);
					if (this.nameGetter) sg.name = this.nameGetter(data);
				}

				g = sg;
			}

			g.records.push(record);
			g.indexes.push(index);

			if (g.aggregates) {
				for (var k in g.aggregates) {
					g.aggregates[k].processor.process(g.aggregates[k].value(data), g.aggregates[k].weight(data));
				}
			}
		};

		_proto.processAll = function processAll(records, indexes) {
			var _this = this;

			if (indexes) {
				for (var i = 0; i < records.length; i++) {
					this.process(records[i], indexes[i]);
				}
			} else
				records.forEach(function(r, i) {
					return _this.process(r, i);
				});
		};

		_proto.report = function report(g, path, level, results) {
			var _this2 = this;

			if (level == this.keys.length) {
				var key = {};
				this.keys.forEach(function(k, i) {
					return (key[k.name] = path[i]);
				});
				results.push({
					key: key,
					name: g.name,
					records: g.records,
					indexes: g.indexes,
					aggregates: transform(g.aggregates, function(p) {
						return p.processor.getResult();
					})
				});
			} else {
				Object.keys(g).forEach(function(k) {
					return _this2.report(g[k], [].concat(path, [k]), level + 1, results);
				});
			}
		};

		_proto.getResults = function getResults() {
			var g = this.groups;
			var results = [];
			this.report(g, [], 0, results);
			return results;
		};

		return Grouper;
	})();

function getComparer(sorters, dataAccessor) {
	var data = (sorters || []).map(function(s) {
		var selector = isDefined(s.value)
			? getSelector(s.value)
			: s.field
				? function(x) {
						return x[s.field];
					}
				: function() {
						return null;
					};
		return {
			getter: dataAccessor
				? function(x) {
						return selector(dataAccessor(x));
					}
				: selector,
			factor: s.direction && s.direction[0].toLowerCase() == "d" ? -1 : 1
		};
	});
	return function(a, b) {
		var d, av, bv;

		for (var i = 0; i < data.length; i++) {
			d = data[i];
			av = d.getter(a);
			bv = d.getter(b);

			if (av == null) {
				if (bv == null) return 0;
				return -d.factor;
			} else {
				if (bv == null) return d.factor;
				if (av < bv) return -d.factor;
				if (av > bv) return d.factor;
			}
		}

		return 0;
	};
}
function indexSorter(sorters, dataAccessor) {
	var cmp = getComparer(sorters, dataAccessor);
	return function(data) {
		var result = Array.from(
			{
				length: data.length
			},
			function(v, k) {
				return k;
			}
		);
		result.sort(function(ia, ib) {
			return cmp(data[ia], data[ib]);
		});
		return result;
	};
}
function sorter(sorters, dataAccessor) {
	var cmp = getComparer(sorters, dataAccessor);
	return function(data) {
		var result = [].concat(data);
		result.sort(cmp);
		return result;
	};
}

//http://stackoverflow.com/questions/36428283/arrow-function-eval-preprocessor
function expandFatArrows(code) {
	var arrowHeadRegex = RegExp(/(\((?:\w+,)*\w+\)|\(\)|\w+)[\r\t ]*=>\s*/);
	var arrowHeadMatch = arrowHeadRegex.exec(code);

	if (arrowHeadMatch) {
		//if no match return as it is
		var params = arrowHeadMatch[1];

		if (params.charAt(0) !== "(") {
			params = "(" + params + ")";
		}

		var index = arrowHeadMatch.index;
		var startCode = code.substring(0, index);
		var bodyAndNext = code.substring(index + arrowHeadMatch[0].length);
		var curlyCount = 0;
		var curlyPresent = false;
		var singleLineBodyEnd = 0;
		var bodyEnd = 0;

		for (var i = 0; i < bodyAndNext.length; i++) {
			var ch = bodyAndNext[i];

			if (ch === "{") {
				curlyPresent = true;
				curlyCount++;
			} else if (ch === "}") {
				curlyCount--;
			} else if (!curlyPresent) {
				//any character other than { or }
				singleLineBodyEnd = getSingeLineBodyEnd(bodyAndNext, i);
				break;
			}

			if (curlyPresent && curlyCount === 0) {
				bodyEnd = i;
				break;
			}
		}

		var body;

		if (curlyPresent) {
			if (curlyCount !== 0) {
				throw Error("Could not match curly braces for function at : " + index);
			}

			body = bodyAndNext.substring(0, bodyEnd + 1);
			var restCode = bodyAndNext.substring(bodyEnd + 1);
			var expandedFun = "(function " + params + body + ").bind(this)";
			code = startCode + expandedFun + restCode;
		} else {
			if (singleLineBodyEnd <= 0) {
				throw Error("could not get function body at : " + index);
			}

			body = bodyAndNext.substring(0, singleLineBodyEnd + 1);
			restCode = bodyAndNext.substring(singleLineBodyEnd + 1);
			expandedFun = "(function " + params + "{return " + body + "}).bind(this)";
			code = startCode + expandedFun + restCode;
		}

		return expandFatArrows(code); //recursive call
	}

	return code;
}

function getSingeLineBodyEnd(bodyCode, startI) {
	var braceCount = 0;
	var openingQuote = null;

	for (var i = startI; i < bodyCode.length; i++) {
		var ch = bodyCode[i];
		var lastCh = null;

		if (ch === '"' || ch === "'") {
			openingQuote = ch;
			i = skipQuotedString(bodyCode, openingQuote, i);
			ch = bodyCode[i];
		}

		if (i !== 0 && !bodyCode[i - 1].match(/[\t\r ]/)) {
			lastCh = bodyCode[i - 1];
		}

		if (ch === "{" || ch === "(") {
			braceCount++;
		} else if (ch === "}" || ch === ")") {
			braceCount--;
		}

		if (braceCount < 0 || (lastCh !== "." && ch === "\n")) {
			return i - 1;
		}
	}

	return bodyCode.length;
}

function skipQuotedString(bodyAndNext, openingQuote, i) {
	var matchFound = false; //matching quote

	var openingQuoteI = i;
	i++;

	for (; i < bodyAndNext.length; i++) {
		var ch = bodyAndNext[i];
		var lastCh = i !== 0 ? bodyAndNext[i - 1] : null;

		if (ch !== openingQuote || (ch === openingQuote && lastCh === "\\")) {
			continue; //skip quoted string
		} else if (ch === openingQuote) {
			//matched closing quote
			matchFound = false;
			break;
		}
	}

	if (matchFound) {
		throw new Error("Could not find closing quote for quote at : " + openingQuoteI);
	}

	return i;
}

function enableFatArrowExpansion() {
	plugFatArrowExpansion(expandFatArrows);
}

function append(array) {
	for (var _len = arguments.length, items = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		items[_key - 1] = arguments[_key];
	}

	if (items.length == 0) return array;
	if (!array) return items;
	return [].concat(array, items);
}

function merge(item, data) {
	var result = item;
	if (data)
		for (var key in data) {
			result = Binding.get(key).set(result, data[key]);
		}
	return result;
}

function filter(array, callback) {
	if (array == null) return array;
	var result = array.filter(callback);
	if (result.length == array.length) return array;
	return result;
}

function updateArray(array, updateCallback, itemFilter, removeFilter) {
	if (!array) return array;
	var newArray = [];
	var dirty = false;

	for (var index = 0; index < array.length; index++) {
		var item = array[index];

		if (removeFilter && removeFilter(item, index)) {
			dirty = true;
			continue;
		}

		if (!itemFilter || itemFilter(item, index)) {
			var newItem = updateCallback(item, index);
			newArray.push(newItem);
			if (newItem !== item) dirty = true;
		} else newArray.push(item);
	}

	return dirty ? newArray : array;
}

function updateTree(array, updateCallback, itemFilter, childrenField, removeFilter) {
	return updateArray(
		array,
		function(item) {
			var _objectSpread2;

			if (!itemFilter || itemFilter(item)) item = updateCallback(item);
			var children = item[childrenField];
			if (!Array.isArray(children)) return item;
			var updatedChildren = updateTree(children, updateCallback, itemFilter, childrenField, removeFilter);
			if (updatedChildren != children)
				return _objectSpread(
					{},
					item,
					((_objectSpread2 = {}), (_objectSpread2[childrenField] = updatedChildren), _objectSpread2)
				);
			return item;
		},
		null,
		removeFilter
	);
}

function removeTreeNodes(array, criteria, childrenField) {
	return updateTree(
		array,
		null,
		function(item) {
			return false;
		},
		childrenField,
		criteria
	);
}

function findTreeNode(array, criteria, childrenField) {
	if (childrenField === void 0) {
		childrenField = "$children";
	}

	if (!Array.isArray(array)) return false;

	for (var i = 0; i < array.length; i++) {
		if (criteria(array[i])) return array[i];
		var child = findTreeNode(array[i][childrenField], criteria, childrenField);
		if (child) return child;
	}

	return false;
}

function moveElement(array, sourceIndex, targetIndex) {
	if (targetIndex == sourceIndex) return array;
	var el = array[sourceIndex];
	var res = [].concat(array);

	if (sourceIndex < targetIndex) {
		for (var i = sourceIndex; i + 1 < targetIndex; i++) {
			res[i] = res[i + 1];
		}

		targetIndex--;
	} else {
		for (var _i = sourceIndex; _i > targetIndex; _i--) {
			res[_i] = res[_i - 1];
		}
	}

	res[targetIndex] = el;
	return res;
}

function insertElement(array, index) {
	for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		args[_key - 2] = arguments[_key];
	}

	return [].concat(array.slice(0, index), args, array.slice(index));
}

function diffArrays(oldArray, newArray, keyFn) {
	if (!keyFn)
		keyFn = function keyFn(e) {
			return e;
		};
	var map = new Map();

	for (var i = 0; i < oldArray.length; i++) {
		map.set(keyFn(oldArray[i]), oldArray[i]);
	}

	var added = [],
		changed = [],
		unchanged = [];

	for (var _i = 0; _i < newArray.length; _i++) {
		var el = newArray[_i];
		var k = keyFn(el);
		var old = map.get(k);
		if (isUndefined(old)) added.push(el);
		else {
			map.delete(k);
			if (el == old) unchanged.push(el);
			else
				changed.push({
					before: old,
					after: el
				});
		}
	}

	var removed = Array.from(map.values());
	return {
		added: added,
		changed: changed,
		unchanged: unchanged,
		removed: removed
	};
}

var ArrayRef =
	/*#__PURE__*/
	(function(_Ref) {
		_inheritsLoose(ArrayRef, _Ref);

		function ArrayRef() {
			return _Ref.apply(this, arguments) || this;
		}

		var _proto = ArrayRef.prototype;

		_proto.append = function append$$1() {
			for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			this.update.apply(this, [append].concat(args));
		};

		_proto.insert = function insert(index) {
			for (
				var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;
				_key2 < _len2;
				_key2++
			) {
				args[_key2 - 1] = arguments[_key2];
			}

			this.update.apply(this, [insertElement].concat(args));
		};

		_proto.filter = function filter(predicate) {
			this.update(function(array) {
				return array.filter(function(a) {
					return predicate(a);
				});
			});
		};

		_proto.move = function move(fromIndex, toIndex) {
			this.update(moveElement, fromIndex, toIndex);
		};

		_proto.clear = function clear() {
			this.set([]);
		};

		_proto.sort = function sort(compare) {
			var data = this.get();
			if (!data) return;
			var x = [].concat(data);
			x.sort(compare);
			this.set(x);
		};

		return ArrayRef;
	})(Ref);

var StoreProxy =
	/*#__PURE__*/
	(function(_View) {
		_inheritsLoose(StoreProxy, _View);

		function StoreProxy(getStore) {
			var _this;

			_this =
				_View.call(this, {
					store: getStore()
				}) || this;
			Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "store", {
				get: getStore
			});
			return _this;
		}

		var _proto = StoreProxy.prototype;

		_proto.getData = function getData() {
			return this.store.getData();
		};

		return StoreProxy;
	})(View);

export {
	Binding,
	isBinding,
	expression,
	Expression,
	plugFatArrowExpansion,
	invalidateExpressionCache,
	stringTemplate,
	StringTemplate,
	invalidateStringTemplateCache,
	View,
	SubscribableView,
	Store,
	ExposedRecordView,
	ExposedValueView,
	ReadOnlyDataView,
	ZoomIntoPropertyView,
	StructuredSelector,
	computable,
	getSelector,
	isSelector,
	Grouper,
	getComparer,
	indexSorter,
	sorter,
	enableFatArrowExpansion,
	append,
	merge,
	filter,
	updateArray,
	updateTree,
	removeTreeNodes,
	findTreeNode,
	moveElement,
	insertElement,
	diffArrays,
	Ref,
	ArrayRef,
	StoreProxy
};
